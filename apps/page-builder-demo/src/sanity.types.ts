// Query TypeMap
import '@sanity/client'

/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type Post = {
  _id: string
  _type: 'post'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  content?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  excerpt?: string
  coverImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
  date?: string
  author?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'author'
  }
}

export type Author = {
  _id: string
  _type: 'author'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  picture?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type Settings = {
  _id: string
  _type: 'settings'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  description?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: never
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  theme?: {
    background?: Color
    text?: Color
  }
  footer?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  ogImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    metadataBase?: string
    _type: 'image'
  }
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type SanityAssistInstructionTask = {
  _type: 'sanity.assist.instructionTask'
  path?: string
  instructionKey?: string
  started?: string
  updated?: string
  info?: string
}

export type SanityAssistTaskStatus = {
  _type: 'sanity.assist.task.status'
  tasks?: Array<
    {
      _key: string
    } & SanityAssistInstructionTask
  >
}

export type SanityAssistSchemaTypeAnnotations = {
  _type: 'sanity.assist.schemaType.annotations'
  title?: string
  fields?: Array<
    {
      _key: string
    } & SanityAssistSchemaTypeField
  >
}

export type SanityAssistOutputType = {
  _type: 'sanity.assist.output.type'
  type?: string
}

export type SanityAssistOutputField = {
  _type: 'sanity.assist.output.field'
  path?: string
}

export type SanityAssistInstructionContext = {
  _type: 'sanity.assist.instruction.context'
  reference?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'assist.instruction.context'
  }
}

export type AssistInstructionContext = {
  _id: string
  _type: 'assist.instruction.context'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  context?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: never
    markDefs?: null
    level?: number
    _type: 'block'
    _key: string
  }>
}

export type SanityAssistInstructionUserInput = {
  _type: 'sanity.assist.instruction.userInput'
  message?: string
  description?: string
}

export type SanityAssistInstructionPrompt = Array<{
  children?: Array<
    | {
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
      }
    | ({
        _key: string
      } & SanityAssistInstructionFieldRef)
    | ({
        _key: string
      } & SanityAssistInstructionContext)
    | ({
        _key: string
      } & SanityAssistInstructionUserInput)
  >
  style?: 'normal'
  listItem?: never
  markDefs?: null
  level?: number
  _type: 'block'
  _key: string
}>

export type SanityAssistInstructionFieldRef = {
  _type: 'sanity.assist.instruction.fieldRef'
  path?: string
}

export type SanityAssistInstruction = {
  _type: 'sanity.assist.instruction'
  prompt?: SanityAssistInstructionPrompt
  icon?: string
  title?: string
  userId?: string
  createdById?: string
  output?: Array<
    | ({
        _key: string
      } & SanityAssistOutputField)
    | ({
        _key: string
      } & SanityAssistOutputType)
  >
}

export type SanityAssistSchemaTypeField = {
  _type: 'sanity.assist.schemaType.field'
  path?: string
  instructions?: Array<
    {
      _key: string
    } & SanityAssistInstruction
  >
}

export type Color = {
  _type: 'color'
  hex?: string
  alpha?: number
  hsl?: HslaColor
  hsv?: HsvaColor
  rgb?: RgbaColor
}

export type RgbaColor = {
  _type: 'rgbaColor'
  r?: number
  g?: number
  b?: number
  a?: number
}

export type HsvaColor = {
  _type: 'hsvaColor'
  h?: number
  s?: number
  v?: number
  a?: number
}

export type HslaColor = {
  _type: 'hslaColor'
  h?: number
  s?: number
  l?: number
  a?: number
}

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Post
  | Author
  | Slug
  | Settings
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | SanityAssistInstructionTask
  | SanityAssistTaskStatus
  | SanityAssistSchemaTypeAnnotations
  | SanityAssistOutputType
  | SanityAssistOutputField
  | SanityAssistInstructionContext
  | AssistInstructionContext
  | SanityAssistInstructionUserInput
  | SanityAssistInstructionPrompt
  | SanityAssistInstructionFieldRef
  | SanityAssistInstruction
  | SanityAssistSchemaTypeField
  | Color
  | RgbaColor
  | HsvaColor
  | HslaColor
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./src/app/layout.tsx
// Variable: layoutQuery
// Query: *[_id == "siteSettings"][0]{  title,  description,  copyrightText}
export type LayoutQueryResult =
  | {
      title: null
      description: null
      copyrightText: null
    }
  | {
      title: string | null
      description: null
      copyrightText: null
    }
  | {
      title: string | null
      description: Array<{
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'normal'
        listItem?: never
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }> | null
      copyrightText: null
    }
  | {
      title: string | null
      description: string | null
      copyrightText: null
    }
  | null

// Source: ./src/app/page.tsx
// Variable: frontPageQuery
// Query: *[_id == "siteSettings"][0]{    frontPage->{      _type,      _id,      title,      sections[]{        ...,        symbol->{_type},        'headline': coalesce(headline, symbol->headline),        'tagline': coalesce(tagline, symbol->tagline),        'subline': coalesce(subline, symbol->subline),        product->{          _type,          _id,          title,          slug,          "media": media[0]        },        products[]->{          '_key': _id,          _type,          _id,          title,          slug,          "media": media[0]        }      },      style    }  }.frontPage
export type FrontPageQueryResult = null

// Source: ./src/app/queries.ts
// Variable: SITE_SETTINGS_QUERY
// Query: *[_id == "siteSettings"][0]{  title,  copyrightText}
export type SITE_SETTINGS_QUERYResult =
  | {
      title: null
      copyrightText: null
    }
  | {
      title: string | null
      copyrightText: null
    }
  | null
// Variable: INDEX_PAGE_QUERY
// Query: *[_id == "siteSettings"][0]{  frontPage->{    _type,    _id,    title,    sections[]{      ...,      symbol->{_type},      'headline': coalesce(headline, symbol->headline),      'tagline': coalesce(tagline, symbol->tagline),      'subline': coalesce(subline, symbol->subline),      product->{        _type,        _id,        title,        slug,        "media": media[0]      },      products[]->{        '_key': _id,        _type,        _id,        title,        slug,        "media": media[0]      }    },    style  }}.frontPage
export type INDEX_PAGE_QUERYResult = null
// Variable: pageQuery
// Query: *[_type == "page" && _id == $id][0]{  _type,  _id,  title,  sections[]{    ...,    symbol->{_type},    'headline': coalesce(headline, symbol->headline),    'tagline': coalesce(tagline, symbol->tagline),    'subline': coalesce(subline, symbol->subline),    product->{      _type,      _id,      title,      slug,      "media": media[0]    },    products[]->{      '_key': _id,      _type,      _id,      title,      slug,      "media": media[0]    }  },  style}
export type PageQueryResult = null

// Source: ./src/app/projects/page.tsx
// Variable: projectsPageQuery
// Query: *[_type == "project" && defined(slug.current)]
export type ProjectsPageQueryResult = Array<never>

// Source: ./src/app/products/page.tsx
// Variable: productsPageQuery
// Query: *[_type == "product" && defined(slug.current)]{    _id,    title,    description,    slug,    "media": media[0]  }
export type ProductsPageQueryResult = Array<never>

// Source: ./src/app/product/[slug]/page.tsx
// Variable: productSlugsQuery
// Query: *[_type == "product" && defined(slug.current)]{"slug": slug.current}
export type ProductSlugsQueryResult = Array<never>
// Variable: productPageQuery
// Query: *[_type == "product" && slug.current == $slug][0]
export type ProductPageQueryResult = null

// Source: ./src/app/project/[slug]/page.tsx
// Variable: projectSlugsQuery
// Query: *[_type == "project" && defined(slug.current)]{"slug": slug.current}
export type ProjectSlugsQueryResult = Array<never>
// Variable: projectPageQuery
// Query: *[_type == "project" && slug.current == $slug][0]
export type ProjectPageQueryResult = null

declare module '@sanity/client' {
  interface SanityQueries {
    '\n  *[_id == "siteSettings"][0]{\n  title,\n  description,\n  copyrightText\n}': LayoutQueryResult
    "\n  *[_id == \"siteSettings\"][0]{\n    frontPage->{\n      _type,\n      _id,\n      title,\n      sections[]{\n        ...,\n        symbol->{_type},\n        'headline': coalesce(headline, symbol->headline),\n        'tagline': coalesce(tagline, symbol->tagline),\n        'subline': coalesce(subline, symbol->subline),\n        product->{\n          _type,\n          _id,\n          title,\n          slug,\n          \"media\": media[0]\n        },\n        products[]->{\n          '_key': _id,\n          _type,\n          _id,\n          title,\n          slug,\n          \"media\": media[0]\n        }\n      },\n      style\n    }\n  }.frontPage\n": FrontPageQueryResult
    '\n*[_id == "siteSettings"][0]{\n  title,\n  copyrightText\n}\n': SITE_SETTINGS_QUERYResult
    "\n*[_id == \"siteSettings\"][0]{\n  frontPage->{\n    _type,\n    _id,\n    title,\n    sections[]{\n      ...,\n      symbol->{_type},\n      'headline': coalesce(headline, symbol->headline),\n      'tagline': coalesce(tagline, symbol->tagline),\n      'subline': coalesce(subline, symbol->subline),\n      product->{\n        _type,\n        _id,\n        title,\n        slug,\n        \"media\": media[0]\n      },\n      products[]->{\n        '_key': _id,\n        _type,\n        _id,\n        title,\n        slug,\n        \"media\": media[0]\n      }\n    },\n    style\n  }\n}.frontPage\n": INDEX_PAGE_QUERYResult
    "\n*[_type == \"page\" && _id == $id][0]{\n  _type,\n  _id,\n  title,\n  sections[]{\n    ...,\n    symbol->{_type},\n    'headline': coalesce(headline, symbol->headline),\n    'tagline': coalesce(tagline, symbol->tagline),\n    'subline': coalesce(subline, symbol->subline),\n    product->{\n      _type,\n      _id,\n      title,\n      slug,\n      \"media\": media[0]\n    },\n    products[]->{\n      '_key': _id,\n      _type,\n      _id,\n      title,\n      slug,\n      \"media\": media[0]\n    }\n  },\n  style\n}\n": PageQueryResult
    '*[_type == "project" && defined(slug.current)]': ProjectsPageQueryResult
    '\n  *[_type == "product" && defined(slug.current)]{\n    _id,\n    title,\n    description,\n    slug,\n    "media": media[0]\n  }\n': ProductsPageQueryResult
    '*[_type == "product" && defined(slug.current)]{"slug": slug.current}': ProductSlugsQueryResult
    '*[_type == "product" && slug.current == $slug][0]': ProductPageQueryResult
    '*[_type == "project" && defined(slug.current)]{"slug": slug.current}': ProjectSlugsQueryResult
    '*[_type == "project" && slug.current == $slug][0]': ProjectPageQueryResult
  }
}
